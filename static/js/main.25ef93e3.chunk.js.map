{"version":3,"sources":["Albums.js","FilterArtist.js","FilterDate.js","App.js","index.js"],"names":["Albums","props","artist","artists","filterDate","albumsFiltered","albums","filter","album","releaseDate","map","index","key","style","listStyle","className","src","coverArt","url","alt","name","href","target","rel","FilterArtist","type","onKeyUp","event","onTextChange","value","FilterDate","today","Date","getMonth","getFullYear","getDate","placeholder","onChange","App","state","isLoading","numFollowed","user","next","filterString","filterBy","prevProps","prevState","this","fetchData","accessToken","queryString","parse","window","location","search","access_token","setState","fetch","headers","Authorization","then","response","json","data","display_name","catch","error","console","log","artistData","total","items","albumDataPromises","Promise","all","albumDatas","forEach","albumData","i","includes","substring","indexOf","release_date","external_urls","spotify","images","fetchedArtists","currentFilterDate","item","currentAlbum","sort","a","b","nameA","toLowerCase","nameB","artistsToRender","text","date","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25ef93e3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Albums(props) {\r\n    let artist = props.artists;\r\n    let filterDate = props.filterDate;\r\n    let albumsFiltered = artist.albums.filter(function(album) {\r\n        return album.releaseDate >= filterDate;\r\n    });\r\n    return (\r\n        <>\r\n            {albumsFiltered.map((albums, index) => (\r\n                <li key={index} style={{ listStyle: \"none\" }}>\r\n                    <div className=\"album-content\">\r\n                        <img\r\n                            src={albums.coverArt.url}\r\n                            className=\"album-cover\"\r\n                            alt={albums.name}\r\n                        />\r\n                        <div className=\"description\">\r\n                            <div className=\"artist-name\">{artist.name}</div>\r\n                            <div className=\"album-title\">{albums.name}</div>\r\n                            <div className=\"release-date\">\r\n                                Release Date: {albums.releaseDate}\r\n                            </div>\r\n                            <a\r\n                                className=\"spotify-btn-bg\"\r\n                                href={albums.url}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                            >\r\n                                <button className=\"open-in-spotify-btn\">\r\n                                    Open In Spotify\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterArtist(props) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <span>Filter by Artist:</span>\r\n      <input\r\n        className=\"filter-input\"\r\n        type=\"text\"\r\n        onKeyUp={event => props.onTextChange(event.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterDate(props) {\r\n    let today = new Date();\r\n    let filterDate =\r\n        (today.getMonth() - 2 === 0\r\n            ? today.getFullYear() - 1\r\n            : today.getFullYear()) +\r\n        \"-\" +\r\n        (today.getMonth() - 2 === 0 ? 12 : today.getMonth() - 2) +\r\n        \"-\" +\r\n        today.getDate();\r\n    return (\r\n        <div className=\"filter\">\r\n            <span>Filter by Date:</span>\r\n            <input\r\n                className=\"filter-input\"\r\n                placeholder=\"2020-01-01\"\r\n                type=\"date\"\r\n                onChange={event => {\r\n                    if (event.target.value === \"\") {\r\n                        props.onChange(filterDate);\r\n                    } else {\r\n                        props.onChange(event.target.value);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport queryString from \"query-string\";\r\nimport Albums from \"./Albums\";\r\nimport FilterArtist from \"./FilterArtist\";\r\nimport FilterDate from \"./FilterDate\";\r\nimport FilterBy from \"./FilterBy\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let today = new Date();\r\n        this.state = {\r\n            isLoading: false,\r\n            numFollowed: 0,\r\n            user: {\r\n                name: \"\",\r\n            },\r\n            artists: [\r\n                {\r\n                    name: \"\",\r\n                    href: \"\",\r\n                    albums: [],\r\n                },\r\n            ],\r\n            next:\r\n                \"https://api.spotify.com/v1/me/following?limit=50&type=artist\",\r\n            filterString: \"\",\r\n            filterDate:\r\n                (today.getMonth() - 2 === 0\r\n                    ? today.getFullYear() - 1\r\n                    : today.getFullYear()) +\r\n                \"-\" +\r\n                (today.getMonth() - 2 === 0\r\n                    ? 12\r\n                    : today.getMonth() - 2 < 10\r\n                    ? \"0\" + (today.getMonth() - 2)\r\n                    : today.getMonth() - 2) +\r\n                \"-\" +\r\n                (today.getDate() >= 10\r\n                    ? today.getDate()\r\n                    : \"0\" + today.getDate()),\r\n            filterBy: \"artist\",\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.next !== prevState.next) {\r\n            this.fetchData();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n\r\n    fetchData() {\r\n        let parsedURI = queryString.parse(window.location.search);\r\n        let accessToken = parsedURI.access_token;\r\n        if (!accessToken) return;\r\n        // fetch user info\r\n        this.setState({ isLoading: true });\r\n        fetch(\"https://api.spotify.com/v1/me\", {\r\n            headers: { Authorization: \"Bearer \" + accessToken },\r\n        })\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    user: {\r\n                        isLoading: false,\r\n                        name: data.display_name,\r\n                    },\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    error,\r\n                    isLoading: false,\r\n                });\r\n                console.log(error);\r\n            });\r\n\r\n        // fetch followed artist album info\r\n        this.setState({ isLoading: true });\r\n        if (this.state.next !== null) {\r\n            fetch(this.state.next, {\r\n                headers: { Authorization: \"Bearer \" + accessToken },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((artistData) => {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        numFollowed: artistData.artists.total,\r\n                        next: artistData.artists.next,\r\n                    });\r\n                    let artists = artistData.artists.items; // artist data as json\r\n                    let albumDataPromises = artists.map((artist) => {\r\n                        // map over each artist and fetch albums\r\n                        let responsePromise = fetch(\r\n                            artist.href +\r\n                                \"/albums?offset=0&limit=50&include_groups=album,single\",\r\n                            {\r\n                                headers: {\r\n                                    Authorization: \"Bearer \" + accessToken,\r\n                                },\r\n                            }\r\n                        );\r\n                        let albumDataPromise = responsePromise.then(\r\n                            (response) => response.json()\r\n                        ); // album data as json\r\n                        return albumDataPromise;\r\n                    });\r\n                    let allAlbumDataPromises = Promise.all(albumDataPromises);\r\n                    let albumsPromise = allAlbumDataPromises.then(\r\n                        (albumDatas) => {\r\n                            albumDatas.forEach((albumData, i) => {\r\n                                artists[i].albums = albumData.items.map(\r\n                                    (albumData) => ({\r\n                                        name: albumData.name.includes(\"(\")\r\n                                            ? albumData.name.substring(\r\n                                                  0,\r\n                                                  albumData.name.indexOf(\"(\")\r\n                                              )\r\n                                            : albumData.name,\r\n                                        releaseDate: albumData.release_date,\r\n                                        url: albumData.external_urls.spotify,\r\n                                        coverArt: albumData.images[0],\r\n                                    })\r\n                                );\r\n                            });\r\n                            return artists;\r\n                        }\r\n                    );\r\n                    return albumsPromise;\r\n                })\r\n                .then((fetchedArtists) => {\r\n                    let currentFilterDate = this.state.filterDate;\r\n                    this.setState({\r\n                        artists: [\r\n                            ...this.state.artists,\r\n                            ...fetchedArtists.map((item) => {\r\n                                return {\r\n                                    name: item.name,\r\n                                    albums: item.albums.filter(function (\r\n                                        currentAlbum\r\n                                    ) {\r\n                                        return (\r\n                                            currentAlbum.releaseDate >=\r\n                                            currentFilterDate\r\n                                        );\r\n                                    }), //TODO STILL NEED TO FILTER OUT DUPLICATES\r\n                                };\r\n                            }),\r\n                        ],\r\n                    });\r\n                    this.setState({\r\n                        artists: this.state.artists.sort((a, b) => {\r\n                            let nameA = a.name.toLowerCase();\r\n                            let nameB = b.name.toLowerCase();\r\n                            if (nameA < nameB) return -1;\r\n                            if (nameA > nameB) return 1;\r\n                            return 0;\r\n                        }),\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({\r\n                        error,\r\n                        isLoading: false,\r\n                    });\r\n                    console.log(error);\r\n                });\r\n        } else {\r\n            this.setState({\r\n                isLoading: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // array of followed artists\r\n        let artistsToRender =\r\n            this.state.user && this.state.artists\r\n                ? this.state.artists.filter((artists) =>\r\n                      artists.name\r\n                          .toLowerCase()\r\n                          .includes(this.state.filterString.toLowerCase())\r\n                  )\r\n                : [];\r\n\r\n        if (this.state.isLoading) {\r\n            return <p className=\"loading\">Loading...</p>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                {this.state.user.name ? (\r\n                    <div>\r\n                        <h1 className=\"home-page-header\">\r\n                            {this.state.user.name}'s New Releases\r\n                        </h1>\r\n                        <h2 className=\"artist-counter\">\r\n                            {this.state.numFollowed} followed artists\r\n                        </h2>\r\n                        <div className=\"filter\">\r\n                            <FilterArtist\r\n                                onTextChange={(text) => {\r\n                                    this.setState({ filterString: text });\r\n                                }}\r\n                            />\r\n                            {/* <FilterBy\r\n                                onChange={(filter) =>\r\n                                    this.setState({ filterBy: filter })\r\n                                }\r\n                            /> */}\r\n                            <FilterDate\r\n                                onChange={(date) =>\r\n                                    this.setState({ filterDate: date })\r\n                                }\r\n                            />\r\n                        </div>\r\n                        <div className=\"album-layout\">\r\n                            {artistsToRender.map((artists, index) => (\r\n                                <Albums\r\n                                    key={index}\r\n                                    artists={artists}\r\n                                    filterDate={this.state.filterDate}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <button\r\n                        onClick={() => {\r\n                            window.location = window.location.href.includes(\r\n                                \"localhost\"\r\n                            )\r\n                                ? \"http://localhost:8888/login\"\r\n                                : \"https://spotifynewreleasesbackend.herokuapp.com/login\";\r\n                        }}\r\n                        className=\"sign-in-button\"\r\n                    >\r\n                        Sign in with Spotify\r\n                    </button>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// renders the app component at the root element (index.html)\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
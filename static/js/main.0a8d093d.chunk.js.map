{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ArtistCounter","artists","this","props","className","length","Component","FilterArtist","type","onKeyUp","event","onTextChange","target","value","FilterDate","onChange","Albums","artist","name","albums","slice","map","style","releaseDate","src","coverArt","url","href","rel","App","today","Date","state","user","next","filterString","filterDate","currentDate","getFullYear","getMonth","getDate","accessToken","queryString","parse","window","location","search","access_token","fetch","headers","then","response","json","data","setState","display_name","artistData","items","albumDataPromises","Promise","all","albumDatas","forEach","albumData","i","includes","substring","indexOf","release_date","external_urls","spotify","images","sort","a","b","nameA","toLowerCase","nameB","item","console","log","artistsToRender","filter","text","date","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a8d093d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport queryString from 'query-string';\n\nclass ArtistCounter extends Component {\n  render() {\n    let artists = this.props.artists\n    return (\n      <div className='artist-counter'>\n        <h2>{artists.length} followed artists</h2>\n      </div>\n    );\n  }\n}\n\nclass NewAlbumsCounter extends Component {\n\n}\n\nclass FilterArtist extends Component {\n  render() {\n    return (\n      <div className='filter'>\n        <span>Filter by Artist:</span>\n        <input className='filter-input' type=\"text\" onKeyUp={event => \n          this.props.onTextChange(event.target.value)}/>\n      </div>\n    );\n  }\n}\n\n\nclass FilterDate extends Component {\n  render() {\n    return (\n      <div className='filter'>\n        <span>Filter by Date:</span>\n        <input className='filter-input' type=\"date\" onChange={event =>\n          this.props.onChange(event.target.value)}/>\n      </div>\n    );\n  }\n}\n\nclass Albums extends Component {\n  render() {\n    let artist = this.props.artists\n    return (\n      <div className='album-layout'>\n        <h3 className='artist-name'>{artist.name}</h3>\n        <ul>\n          {artist.albums.slice(0,1).map(albums => \n            <li style={{'list-style': 'none'}}>\n              <span className='album-title'>{albums.name}</span>\n              <br></br>\n              <span>  Release Date: {albums.releaseDate}</span>\n              <br></br>\n              <img src={albums.coverArt.url} className='album-cover'/>\n              <br></br>\n              <a href={albums.url} target='_blank' rel='noopener noreferrer'>\n                <button className='open-in-spotify-button'>Open In Spotify</button>\n              </a>\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    let today = new Date()\n    this.state = {\n      user: {\n        name: '',\n      },\n      artists: [{\n        name: '',\n        href: '',\n        albums: [],\n      }],\n      next: 'https://api.spotify.com/v1/me/following?limit=50&type=artist',\n      filterString: '',\n      filterDate: '2018-01-01',\n      currentDate: today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate(),\n    }\n  }\n\n  componentDidMount() {\n    let parsedURI = queryString.parse(window.location.search)\n    let accessToken = parsedURI.access_token\n    if(!accessToken)\n      return\n    \n    // fetch user info\n    fetch('https://api.spotify.com/v1/me', {\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(data => this.setState({\n      user: {\n        name: data.display_name,\n      }\n    }))\n    \n    // fetch followed artist album info\n    fetch(this.state.next, {\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(artistData => {\n      this.setState({\n        next: artistData.artists.next\n      })\n      let artists = artistData.artists.items  // artist data as json\n      let albumDataPromises = artists.map(artist => {   // map over each artist and fetch albums\n        let responsePromise = fetch(artist.href + '/albums?offset=0&limit=50&include_groups=album,single', {\n          headers: {'Authorization': 'Bearer ' + accessToken}\n        })\n        let albumDataPromise = responsePromise.then(response => response.json())  // album data as json\n        return albumDataPromise\n      })\n      let allAlbumDataPromises = Promise.all(albumDataPromises)\n      let albumsPromise = allAlbumDataPromises.then(albumDatas => {\n        albumDatas.forEach((albumData, i) => {\n          artists[i].albums = albumData.items\n            .map(albumData => ({\n              name: albumData.name.includes('(') ? albumData.name.substring(0, albumData.name.indexOf('(')) : albumData.name,\n              releaseDate: albumData.release_date,\n              url: albumData.external_urls.spotify,\n              coverArt: albumData.images[0],\n            }))\n        })\n        return artists\n      })\n      return albumsPromise\n    })\n    .then(artists => this.setState({\n      artists: artists.sort((a, b) => {\n        let nameA = a.name.toLowerCase()\n        let nameB = b.name.toLowerCase()\n        if (nameA < nameB) //sort string ascending\n         return -1;\n        if (nameA > nameB)\n         return 1;\n        return 0; //default return value (no sorting)\n       }).map(item => {\n        return {\n          name: item.name,\n          albums: item.albums\n        }\n    })\n    }))\n  }\n  \n  render() {\n    console.log(this.state)\n    // array of followed artists\n    let artistsToRender =\n      this.state.user &&    // checks if there is a user that follows at least one artist\n      this.state.artists\n        ? this.state.artists.filter(artists =>\n          artists.name.toLowerCase().includes(this.state.filterString.toLowerCase()))\n        : []\n\n    /*artistToRender = artistToRender.map(artists => \n      artists.albums.forEach((albums, i) => {\n        artists[i].albums = artists.albums.filter(artists.albums[i].releaseDate > this.state.filterDate)\n      }))*/\n\n    return (\n      <div className=\"app\">\n        {this.state.user.name ?\n        <div>\n          <h1 className='home-page-header'>\n            {this.state.user.name}'s Playlists\n          </h1>\n          <ArtistCounter artists={this.state.artists}/>\n          <div className='filter'>\n            <FilterArtist onTextChange={text => {\n                this.setState({filterString: text})\n              }}/>\n            <FilterDate onChange={date =>\n              this.setState({filterDate: date})\n            }/>\n          </div>\n          {artistsToRender.map(artists => \n            <Albums artists={artists} />\n          )}\n        </div> : <button onClick={() => {\n            window.location = window.location.href.includes('localhost') \n              ? 'http://localhost:8888/login' \n              : 'https://spotifynewreleasesbackend.herokuapp.com/login' }\n          }\n          className='sign-in-button'>Sign in with Spotify</button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
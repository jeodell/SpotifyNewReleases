{"version":3,"sources":["Albums.js","FilterArtist.js","FilterDate.js","App.js","index.js"],"names":["Albums","props","artist","artists","filterDate","albumsFiltered","albums","filter","album","releaseDate","map","index","key","style","listStyle","className","src","coverArt","url","alt","name","href","target","rel","FilterArtist","type","onKeyUp","event","onTextChange","value","FilterDate","today","Date","getMonth","getFullYear","getDate","placeholder","onChange","App","state","isLoading","numFollowed","user","next","filterString","prevProps","prevState","this","fetchData","accessToken","queryString","parse","window","location","search","access_token","setState","fetch","headers","Authorization","then","response","json","data","display_name","catch","error","console","log","artistData","total","items","albumDataPromises","Promise","all","albumDatas","forEach","albumData","i","includes","substring","indexOf","release_date","external_urls","spotify","images","fetchedArtists","item","currentAlbum","sort","a","b","nameA","toLowerCase","nameB","artistsToRender","text","date","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e04a5f1f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Albums(props) {\r\n    let artist = props.artists;\r\n    let filterDate = props.filterDate;\r\n    let albumsFiltered = artist.albums.filter(function(album) {\r\n        return album.releaseDate >= filterDate;\r\n    });\r\n    return (\r\n        <>\r\n            {albumsFiltered.map((albums, index) => (\r\n                <li key={index} style={{ listStyle: \"none\" }}>\r\n                    <div className=\"album-content\">\r\n                        <img\r\n                            src={albums.coverArt.url}\r\n                            className=\"album-cover\"\r\n                            alt={albums.name}\r\n                        />\r\n                        <div className=\"description\">\r\n                            <h1 className=\"artist-name\">{artist.name}</h1>\r\n                            <br></br>\r\n                            <h1 className=\"album-title\">{albums.name}</h1>\r\n                            <br></br>\r\n                            <h1 className=\"release-date\">\r\n                                Release Date: {albums.releaseDate}\r\n                            </h1>\r\n                            <br></br>\r\n                            <a\r\n                                className=\"spotify-btn-bg\"\r\n                                href={albums.url}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                            >\r\n                                <button className=\"open-in-spotify-btn\">\r\n                                    Open In Spotify\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterArtist(props) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <span>Filter by Artist:</span>\r\n      <input\r\n        className=\"filter-input\"\r\n        type=\"text\"\r\n        onKeyUp={event => props.onTextChange(event.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterDate(props) {\r\n    let today = new Date();\r\n    let filterDate =\r\n        (today.getMonth() - 2 === 0\r\n            ? today.getFullYear() - 1\r\n            : today.getFullYear()) +\r\n        \"-\" +\r\n        (today.getMonth() - 2 === 0 ? 12 : today.getMonth() - 2) +\r\n        \"-\" +\r\n        today.getDate();\r\n    return (\r\n        <div className=\"filter\">\r\n            <span>Filter by Date:</span>\r\n            <input\r\n                className=\"filter-input\"\r\n                placeholder=\"2020-01-01\"\r\n                type=\"date\"\r\n                onChange={event => {\r\n                    if (event.target.value === \"\") {\r\n                        props.onChange(filterDate);\r\n                    } else {\r\n                        props.onChange(event.target.value);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport queryString from \"query-string\";\nimport Albums from \"./Albums\";\nimport FilterArtist from \"./FilterArtist\";\nimport FilterDate from \"./FilterDate\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        let today = new Date();\n        this.state = {\n            isLoading: false,\n            numFollowed: 0,\n            user: {\n                name: \"\"\n            },\n            artists: [\n                {\n                    name: \"\",\n                    href: \"\",\n                    albums: []\n                }\n            ],\n            next:\n                \"https://api.spotify.com/v1/me/following?limit=50&type=artist\",\n            filterString: \"\",\n            filterDate:\n                (today.getMonth() - 2 === 0\n                    ? today.getFullYear() - 1\n                    : today.getFullYear()) +\n                \"-\" +\n                (today.getMonth() - 2 === 0 ? 12 : today.getMonth() - 2) +\n                \"-\" +\n                today.getDate()\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.next !== prevState.next) {\n            this.fetchData();\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    fetchData() {\n        let parsedURI = queryString.parse(window.location.search);\n        let accessToken = parsedURI.access_token;\n        if (!accessToken) return;\n        // fetch user info\n        this.setState({ isLoading: true });\n        fetch(\"https://api.spotify.com/v1/me\", {\n            headers: { Authorization: \"Bearer \" + accessToken }\n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    user: {\n                        isLoading: false,\n                        name: data.display_name\n                    }\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    error,\n                    isLoading: false\n                });\n                console.log(error);\n            });\n\n        // fetch followed artist album info\n        this.setState({ isLoading: true });\n        if (this.state.next !== null) {\n            fetch(this.state.next, {\n                headers: { Authorization: \"Bearer \" + accessToken }\n            })\n                .then(response => response.json())\n                .then(artistData => {\n                    this.setState({\n                        isLoading: false,\n                        numFollowed: artistData.artists.total,\n                        next: artistData.artists.next\n                    });\n                    let artists = artistData.artists.items; // artist data as json\n                    let albumDataPromises = artists.map(artist => {\n                        // map over each artist and fetch albums\n                        let responsePromise = fetch(\n                            artist.href +\n                                \"/albums?offset=0&limit=50&include_groups=album,single\",\n                            {\n                                headers: {\n                                    Authorization: \"Bearer \" + accessToken\n                                }\n                            }\n                        );\n                        let albumDataPromise = responsePromise.then(response =>\n                            response.json()\n                        ); // album data as json\n                        return albumDataPromise;\n                    });\n                    let allAlbumDataPromises = Promise.all(albumDataPromises);\n                    let albumsPromise = allAlbumDataPromises.then(\n                        albumDatas => {\n                            albumDatas.forEach((albumData, i) => {\n                                artists[i].albums = albumData.items.map(\n                                    albumData => ({\n                                        name: albumData.name.includes(\"(\")\n                                            ? albumData.name.substring(\n                                                  0,\n                                                  albumData.name.indexOf(\"(\")\n                                              )\n                                            : albumData.name,\n                                        releaseDate: albumData.release_date,\n                                        url: albumData.external_urls.spotify,\n                                        coverArt: albumData.images[0]\n                                    })\n                                );\n                            });\n                            return artists;\n                        }\n                    );\n                    return albumsPromise;\n                })\n                .then(fetchedArtists => {\n                    this.setState({\n                        artists: [\n                            ...this.state.artists,\n                            ...fetchedArtists.map(item => {\n                                return {\n                                    name: item.name,\n                                    albums: item.albums.filter(function(\n                                        currentAlbum\n                                    ) {\n                                        return (\n                                            currentAlbum.releaseDate >=\n                                            \"2020-01-01\"\n                                        );\n                                    }) //TODO STILL NEED TO FILTER OUT DUPLICATES\n                                };\n                            })\n                        ]\n                    });\n                    this.setState({\n                        artists: this.state.artists.sort((a, b) => {\n                            let nameA = a.name.toLowerCase();\n                            let nameB = b.name.toLowerCase();\n                            if (nameA < nameB) return -1;\n                            if (nameA > nameB) return 1;\n                            return 0;\n                        })\n                    });\n                })\n                .catch(error => {\n                    this.setState({\n                        error,\n                        isLoading: false\n                    });\n                    console.log(error);\n                });\n        } else {\n            this.setState({\n                isLoading: false\n            });\n        }\n    }\n\n    render() {\n        console.log(this.state.artists);\n        // array of followed artists\n        let artistsToRender =\n            this.state.user && this.state.artists // checks if there is a user that follows at least one artist\n                ? this.state.artists.filter(artists =>\n                      artists.name\n                          .toLowerCase()\n                          .includes(this.state.filterString.toLowerCase())\n                  )\n                : [];\n\n        if (this.state.isLoading) {\n            return <p className=\"loading\">Loading...</p>;\n        }\n\n        return (\n            <div className=\"app\">\n                {this.state.user.name ? (\n                    <div>\n                        <h1 className=\"home-page-header\">\n                            {this.state.user.name}'s New Releases (3 Months)\n                        </h1>\n                        <h2 className=\"artist-counter\">\n                            {this.state.numFollowed} followed artists\n                        </h2>\n                        <div className=\"filter\">\n                            <FilterArtist\n                                onTextChange={text => {\n                                    this.setState({ filterString: text });\n                                }}\n                            />\n                            <FilterDate\n                                onChange={date =>\n                                    this.setState({ filterDate: date })\n                                }\n                            />\n                        </div>\n                        <div className=\"album-layout\">\n                            {artistsToRender.map((artists, index) => (\n                                <Albums\n                                    key={index}\n                                    artists={artists}\n                                    filterDate={this.state.filterDate}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                ) : (\n                    <button\n                        onClick={() => {\n                            window.location = window.location.href.includes(\n                                \"localhost\"\n                            )\n                                ? \"http://localhost:8888/login\"\n                                : \"https://spotifynewreleasesbackend.herokuapp.com/login\";\n                        }}\n                        className=\"sign-in-button\"\n                    >\n                        Sign in with Spotify\n                    </button>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// renders the app component at the root element (index.html)\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}